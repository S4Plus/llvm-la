; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -march=loongarch64 -mattr=+lasx  < %s | FileCheck %s

define <8 x i32> @v8i32_double_input(<8 x i32> %vj, <8 x i32> %vk) {
; CHECK-LABEL: v8i32_double_input:
; CHECK:       # %bb.0:
; CHECK-NEXT:    la.pcrel	$r4, .LCPI0_0
; CHECK-NEXT:    # la expanded slot
; CHECK-NEXT:    xvld	$xr2, $r4, 0
; CHECK-NEXT:    xvperm.w	$xr1, $xr1, $xr2
; CHECK-NEXT:    xvperm.w	$xr2, $xr0, $xr2
; CHECK-NEXT:    la.pcrel	$r4, .LCPI0_1
; CHECK-NEXT:    # la expanded slot
; CHECK-NEXT:    xvld	$xr0, $r4, 0
; CHECK-NEXT:    xvbitsel.v	$xr0, $xr2, $xr1, $xr0
; CHECK-NEXT:    jr $ra
entry:
 %a = shufflevector <8 x i32> %vj, <8 x i32> %vk, <8 x i32> <i32 2, i32 4, i32 5, i32 7, i32 14, i32 9, i32 12, i32 11>
 ret <8 x i32> %a
}

define <8 x float> @v8f32_double_input(<8 x float> %vj, <8 x float> %vk) {
; CHECK-LABEL: v8f32_double_input:
; CHECK:       # %bb.0:
; CHECK-NEXT:    la.pcrel	$r4, .LCPI1_0
; CHECK-NEXT:    # la expanded slot
; CHECK-NEXT:    xvld	$xr2, $r4, 0
; CHECK-NEXT:    xvperm.w	$xr1, $xr1, $xr2
; CHECK-NEXT:    xvperm.w	$xr2, $xr0, $xr2
; CHECK-NEXT:    la.pcrel	$r4, .LCPI1_1
; CHECK-NEXT:    # la expanded slot
; CHECK-NEXT:    xvld	$xr0, $r4, 0
; CHECK-NEXT:    xvbitsel.v	$xr0, $xr2, $xr1, $xr0
; CHECK-NEXT:    jr $ra
entry:
 %a = shufflevector <8 x float> %vj, <8 x float> %vk, <8 x i32> <i32 15, i32 4, i32 5, i32 7, i32 14, i32 9, i32 12, i32 11>
 ret <8 x float> %a
}